Lodash和Underscore是非常优秀的javascript的工具集合框架；

_.each  遍历一系列元素，并且调用回调处理方程；
//Underscore/Lodash
_.each([1,2,3], function(value, index) {
	console.log(value);
});

//Native
[1,2,3].forEach(function(value, index) {
   console.log(value);
});
// support  ie9+

_.map   将某个列表中的元素映射到新的列表中
var array1 = [1,2,3];
var array2 = _.map(array1, function(value, index) {
	return value*2;
});

//output  array2 [2, 4, 6]

var array2 = array1.map(function(value, index) {
	return value * 2;
});

_.some  /   obj.some

_.every / obj.every

_.reduce //接收一个函数作为累加器， 数组中的每个值（从左到右）开始缩减， 最终为一个值
var arr  = [1,2,3,4];
var result = _.reduce(arr, function(previousValue, currentValue, currentIndex, arr) {
	return previousValue + currentValue;
});

//result: 10

//Native
var rst = arr.reduce(function(previousValue, currentValue, currentIndex, arr) {
	return previousValue + currentValue;
});
// rst: 10;

_.reduceRight  /  obj.reduceRight


_.filter  使用指定的函数测试所有元素， 并创建一个包含所有通过测试的元素的新数组
function isBigEnough(value) {
	return value >= 10;
}
var array = [1, 11, 23, 5];
var filtered = _.filter(array, isBigEnough);
//filtered [11, 23]

//Native
var filtered2 = array.filter(isBigEnough);


_.find  返回数组中满足测试条件的一个元素， 如果没有满足的， 则返回undefined；
var users = [
	{"user":"yang", "age":27, "active":true},
	{"user":"jian", "age":17, "active":true}
	{"user":"xx", "age":2, "active":true}
];

_.find(users, function(o), function() {
	return o.age < 25;
});

//jian

//native
user.find(function(o) {
	return o.age < 25;
});


_.findIndex  用来指定查找数组中某指定元素的索引，如果找不到指定的元素, 则返回 -1

var index = _.findIndex(user, function(o) {
	return o.age < 25;
});

var index = user.findIndex(function(o) {
	return o.age < 25;
});

//1


_.indexOf  返回指定值在字符串对象中首次出现的位置， 如果找不到则返回-1
var array = [2, 9, 9];
var result = _.indexOf(array, 2);

//native 
var result = array.indexOf(2);
//0


_.lastIndexOf  lastIndexOf


_.includes  判断元素是否在列表中

var array = [1,2,3]
_.includes(array, 1);
/
array.includes(1)

// -> true
 
_.keys 返回某个对象所有可枚举的键名  // Object.keys(obj)
var obj = {
	one: 1,
	two: 2,
	three: 3
}
var result = _.keys(obj);

var result = Object.keys(obj);

//  result ["one", "two", "three"];

_.size 返回集合大小
var sz = _.size(obj);
var sz = Object.keys(obj).length;
// => 3



















_.trim 消去字符串起始的空白
var rst = _.trim('    ab c ');
var rst = '   ab c '.trim();
// -> ab c


//Lodash  -> _.repeat
var result = _.repeat("abc", 2)
var result = 'abc'.repeat(2);

// -> 'abcabc'















